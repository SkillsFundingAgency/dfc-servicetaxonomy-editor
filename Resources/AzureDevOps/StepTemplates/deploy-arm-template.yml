# This template includes a tokenisation step.  
# In addition to the passing in the parameters listed below you will need to ensure that the variables that are tokenised are scoped to the stage or job calling this step template.

parameters:
  ArmTemplateRoot: ''
  AzureSubscription: ''
  EnvironmentTag: ''
  ParentBusinessTag: ''
  ResourceGroup: ''
  StorageAccountResourceGroupName: ''
  PSScriptPath: ''
  ServiceOfferingTag: ''
  WebAppName: ''
  SetTagsScriptUrl: 'https://raw.githubusercontent.com/SkillsFundingAgency/dfc-devops/master/PSScripts/Set-EsfaResourceGroupTags.ps1'
  SetTagsScriptFilePath: '$(System.DefaultWorkingDirectory)\Set-EsfaResourceGroupTags.ps1'

steps:
- task: AzurePowerShell@5
  name: 'setStorageConnectionString'
  displayName: 'Build Storage Connection String'
  inputs:
    azureSubscription: ${{ parameters.AzureSubscription }}
    ScriptPath: '${{ parameters.PSScriptPath }}/fetchStorageKeyAndBuildConnectionString.ps1'
    ScriptArguments: >
      -StorageAccountResourceGroupName '${{ parameters.StorageAccountResourceGroupName }}' 
      -StorageAccountName '$(MediaStorageAccountName)'
    azurePowerShellVersion: LatestVersion

- task: esfadevops.Tokenization.custom-build-task.Tokenization@0
  displayName: 'Tokenization: Transform file parameters.json'
  inputs:
    SourcePath: ${{ parameters.ArmTemplateRoot }}
    TargetFileNames: parameters.json

- task: PowerShell@2
  name: DownloadSetEsfaResourceGroupTagsScript
  displayName: 'Download Set-EsfaResourceGroupTags script'
  inputs:
    targetType: 'inline'
    script: Invoke-WebRequest -Uri ${{ parameters.SetTagsScriptUrl }} -OutFile ${{ parameters.SetTagsScriptFilePath }}

- task: AzurePowerShell@5
  displayName: 'Tagging Resource Group ${{ parameters.ResourceGroup }}'
  inputs:
    azureSubscription: ${{ parameters.AzureSubscription }}
    scriptType: filePath
    ScriptPath: ${{ parameters.SetTagsScriptFilePath }}
    ScriptArguments: '-ResourceGroupName ${{ parameters.ResourceGroup }} -Environment "${{ parameters.EnvironmentTag }}" -ParentBusiness "${{ parameters.ParentBusinessTag }}" -ServiceOffering "${{ parameters.ServiceOfferingTag }}"'
    azurePowerShellVersion: LatestVersion

- task: AzureResourceGroupDeployment@2
  displayName: 'Azure Deployment: Deploy resources to ${{ parameters.ResourceGroup }}'
  inputs:
    azureSubscription: ${{ parameters.AzureSubscription }}
    resourceGroupName: '${{ parameters.ResourceGroup }}'
    location: 'West Europe'
    csmFile: '${{ parameters.ArmTemplateRoot }}/template.json'
    csmParametersFile: '${{ parameters.ArmTemplateRoot }}/parameters.json'
    deploymentOutputs: ARMOutputs

- task: DeleteFiles@1
  displayName: 'Delete tokenised parameters.json file'
  inputs:
    SourceFolder: ${{ parameters.ArmTemplateRoot }}
    Contents: parameters.json
  condition: always()

- task: AzurePowerShell@5
  displayName: 'Azure PowerShell script: Creation of Service Principal'
  inputs:
    azureSubscription: '${{ parameters.AzureSubscription }}'
    ScriptPath: '${{ parameters.PSScriptPath }}/New-ServicePrincipalAndStoreSecrets.ps1'
    ScriptArguments: -SharedResourceGroupName "$(SharedResourceGroup)" `
          -ServicePrincipalName "$(ServicePrincipalName)"  `
          -RepoName dfc-servicetaxonomy-editor  `
          -KeyVaultName "$(sharedKeyVaultName)"  `
          -TenantId "$(Authentication_Tenant)"  `
          -CdnProfileName "$(CdnProfileName)"  -Verbose
    azurePowerShellVersion: LatestVersion

- task: AzurePowerShell@5
  displayName: 'Azure PowerShell script: Keyvault permissions'
  inputs:
    azureSubscription: '${{ parameters.AzureSubscription }}'
    ScriptPath: '${{ parameters.PSScriptPath }}/Assign-KeyVault-Permissions-To-Identity.ps1'
    ScriptArguments: "-KeyVaultName  $(sharedKeyVaultName) -ResourceGroupName $(sharedResourceGroup) -ServicePrincipalName '$(ServicePrincipalName)-as' -Verbose"
    azurePowerShellVersion: LatestVersion

- task: AzurePowerShell@5
  displayName: 'Create SQL user'
  inputs:
    azureSubscription: '${{ parameters.AzureSubscription }}'
    ScriptPath: '${{ parameters.PSScriptPath }}/Set-SqlUser.ps1'
    ScriptArguments: "-KeyVaultName $(sharedKeyVaultName) -SqlServerName $(sharedSqlServerName) -SqlDatabaseName $(SqlDatabaseName) -EditorAdminUsername '${{ parameters.WebAppName }}-svc'"
    azurePowerShellVersion: LatestVersion