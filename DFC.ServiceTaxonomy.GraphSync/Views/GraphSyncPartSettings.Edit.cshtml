@model DFC.ServiceTaxonomy.GraphSync.Settings.GraphSyncPartSettingsViewModel

<fieldset class="form-group">
    <div class="row col-md">
        <label asp-for="Settings">@T["Settings"]</label>
        @Html.DropDownListFor(x => x.SelectedSetting, Model.Settings, new { @class = "form-control", @id = "ddlSelectSettings" })
        <span class="hint">@T["Select from a pre-defined list of settings to pre-populate values below"]</span>
    </div>
</fieldset>
<fieldset class="form-group graphsync-setting">
    <div class="row col-md">
        <label asp-for="BagPartContentItemRelationshipType">@T["BagPart ContentItem relationship type"]</label>
        <input asp-for="BagPartContentItemRelationshipType" class="form-control" readonly="@(Model.ReadOnly ? "readonly" : "")" />
        <span class="hint">@T["If this content type is contained withing a BagPart, the type of relationship to create in the graph."]</span>
    </div>
</fieldset>

<fieldset class="form-group graphsync-setting">
    <div class="row col-md">
        <label asp-for="NodeNameTransform">@T["Node name transform"]</label>
        <input asp-for="NodeNameTransform" class="form-control" readonly="@(Model.ReadOnly ? "readonly" : "")" />
        <span class="hint">@T["If supplied, c# code to transform the node name (accessible through the variable named 'Value')."]</span>
    </div>
</fieldset>

<fieldset class="form-group graphsync-setting">
    <div class="row col-md">
        <label asp-for="PropertyNameTransform">@T["Property name transform"]</label>
        <input asp-for="PropertyNameTransform" class="form-control" readonly="@(Model.ReadOnly ? "readonly" : "")" />
        <span class="hint">@T["If supplied, c# code to transform property names (accessible through the variable named 'Value')."]</span>
    </div>
</fieldset>

<fieldset class="form-group graphsync-setting">
    <div class="row col-md">
        <label asp-for="CreateRelationshipType">@T["Create relationship type"]</label>
        <input asp-for="CreateRelationshipType" class="form-control" readonly="@(Model.ReadOnly ? "readonly" : "")" />
        <span class="hint">@T["C# code to create the relationship type (a variable named 'Value' contains the content type of the destination)."]</span>
    </div>
</fieldset>

<fieldset class="form-group graphsync-setting">
    <div class="row col-md">
        <label asp-for="IdPropertyName">@T["ID property name"]</label>
        <input asp-for="IdPropertyName" class="form-control" readonly="@(Model.ReadOnly ? "readonly" : "")" />
        <span class="hint">@T["The name (key) of the ID property on the node."]</span>
    </div>
</fieldset>

<fieldset class="form-group graphsync-setting">
    <div class="row col-md">
        <label asp-for="GenerateIdPropertyValue">@T["Generate ID value"]</label>
        <input asp-for="GenerateIdPropertyValue" class="form-control" readonly="@(Model.ReadOnly ? "readonly" : "")" />
        <span class="hint">@T["C# code to generate an ID value."]</span>
    </div>
</fieldset>

<fieldset class="form-group graphsync-setting">
    <div class="row col-md">
        <label asp-for="PreExistingNodeUriPrefix">@T["Pre-Existing Node Uri Prefix"]</label>
        <input asp-for="PreExistingNodeUriPrefix" class="form-control" readonly="@(Model.ReadOnly ? "readonly" : "")" />
        <span class="hint">@T["The prefix to replace Content Api Prefix with"]</span>
    </div>
</fieldset>

<fieldset class="form-group graphsync-setting">
    <div class="row col-md">
        <label asp-for="VisualiserNodeDepth">@T["Visualiser Node Depth"]</label>
        <input asp-for="VisualiserNodeDepth" class="form-control" />
        <span class="hint">@T["The maximum depth the visualiser will traverse for a given node"]</span>
    </div>
</fieldset>

<fieldset class="form-group graphsync-setting">
    <div class="row col-md">
        <label asp-for="VisualiserIncomingRelationshipsPathLength">@T["Visualiser Incoming Relationships Path Length"]</label>
        <input asp-for="VisualiserIncomingRelationshipsPathLength" class="form-control" />
        <span class="hint">@T["The path length of incoming relationships to visualise"]</span>
    </div>
</fieldset>

<fieldset class="form-group graphsync-setting">
    <div class="custom-control custom-checkbox">
        <input asp-for="PreexistingNode" type="checkbox" class="custom-control-input" readonly="@(Model.ReadOnly ? "readonly" : "")" />
        <label class="custom-control-label" asp-for="PreexistingNode">@T["Preexisting node"]</label>
        <span class="hint">— @T["Check if the containing content type represents a node already in the graph. If selected, the existing node will not be modified (but relationships will still be created)."]</span>
    </div>
</fieldset>

<fieldset class="form-group graphsync-setting">
    <div class="custom-control custom-checkbox">
        <input asp-for="DisplayId" type="checkbox" class="custom-control-input" readonly="@(Model.ReadOnly ? "readonly" : "")" />
        <label class="custom-control-label" asp-for="DisplayId">@T["Display ID"]</label>
        <span class="hint">— @T["Check to display the ID in the editor."]</span>
    </div>
</fieldset>

<script at="Foot" type="text/javascript">
    var allSettings = @Html.Raw(Json.Serialize(Model.AllSettings));
    $(function () {
        var val = $('#ddlSelectSettings').val();

        if (val == "Custom") {
            $('.graphsync-setting input').attr("readonly", false);
        }

        $('#ddlSelectSettings').on('change', function (ev) {
            var val = $(this).val();

            //todo: needs to 'readonly' checkboxes, see https://stackoverflow.com/questions/155291/can-html-checkboxes-be-set-to-readonly

            if (val == "Custom") {
                //Remove readonly attr
                $('.graphsync-setting input').attr("readonly", false);
            } else {
                //Add readonly attr
                $('.graphsync-setting input').attr("readonly", true);

                populateValuesFromSettings(allSettings, val);
            }
        })
    });

    var populateValuesFromSettings = function (allSettings, selectedSetting) {
        const e = allSettings.find(s => s.name === selectedSetting);
        if (e) {
            $('.form-group input').each(function (index, input) {
                let key = input.name.substr(input.name.lastIndexOf(".") + 1);
                key = key.charAt(0).toLowerCase() + key.slice(1)

                const value = e[key];
                switch (input.type) {
                    case "checkbox":
                        input.checked = value;
                        break;
                    case "text":
                        input.value = value;
                        break;
                }
            })
        }
    }
</script>

