@using OrchardCore.ContentManagement
@*@using DFC.ServiceTaxonomy.ContentApproval.Models
@using DFC.ServiceTaxonomy.ContentApproval.Models.Enums*@
@using DFC.ServiceTaxonomy.CustomEditor.Configuration
@using DFC.ServiceTaxonomy.CustomEditor.Constants
@using DFC.ServiceTaxonomy.PageLocation.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options
@using OrchardCore.Contents
@inject IContentManager ContentManager
@inject IOptions<PagesConfiguration> Config
@inject IAuthorizationService AuthorizationService


@{
    ContentItem contentItem = Model.ContentItem;
    var PageConfig = Config.Value;

    var hasPublished = await ContentManager.HasPublishedVersionAsync(contentItem);
    var hasDraft = contentItem.HasDraft();
    var hasViewPermission = await AuthorizationService.AuthorizeAsync(User, CommonPermissions.ViewContent, contentItem);
    var hasPreviewPermission = await AuthorizationService.AuthorizeAsync(User, CommonPermissions.PreviewContent, contentItem);
    var previewContentTypes = contentItem.ContentType == ContentTypes.Page; //contentItem.ContentType == ContentTypes.JobProfile ||
}

@*@if (contentItem.Has<ContentApprovalPart>())
{
    var isInReview = contentItem.As<ContentApprovalPart>()?.ReviewStatus == ReviewStatus.InReview;
    var hasEditPermission = await AuthorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem) && User.HasClaim(c => c.Value == CommonPermissions.EditContent.Name);
    if (!isInReview && hasEditPermission)
    {
        <a asp-action="Edit" asp-controller="ContentApproval" asp-route-area="DFC.ServiceTaxonomy.ContentApproval" asp-route-contentItemId="@contentItem.ContentItemId" asp-route-returnUrl="@FullRequestPath" class="btn btn-sm btn-primary edit"><span>@T["Edit"]</span></a>
    }
}
else
{
    <a edit-for="@contentItem" asp-route-returnUrl="@FullRequestPath" class="btn btn-primary btn-sm">@T["Edit"]</a>
}*@

<a edit-for="@contentItem" asp-route-returnUrl="@FullRequestPath" class="btn btn-primary btn-sm">@T["Edit"]</a>

@if (hasPublished && hasViewPermission && !previewContentTypes)
{
    <a display-for="@contentItem" class="btn btn-success btn-sm" itemprop="">@T["View"]</a>
}

@if (hasDraft && hasPreviewPermission && !previewContentTypes)
{
    <a asp-action="Preview" asp-controller="Item" asp-route-area="OrchardCore.Contents" asp-route-contentItemId="@contentItem.ContentItemId" target="_blank" class="btn btn-sm btn-primary preview"><span>@T["Preview Draft"]</span></a>
}

@if (previewContentTypes)
{
    //string url = contentItem.ContentType == ContentTypes.JobProfile
    //    ? $"/job-profiles/{contentItem.Content["JobProfileHeader"]["JobProfileWebsiteUrl"]["Text"]}"
    //    : contentItem.Content[nameof(PageLocationPart)][nameof(PageLocationPart.FullUrl)];
    // The code below will likely work for the current Job Profiles content type however best to remove Job Profiles until the full stax/cui implementation is fully grounded.
    string url = contentItem.Content[nameof(PageLocationPart)][nameof(PageLocationPart.FullUrl)];

    <div class="btn-group">
        <button class="btn btn-success btn-sm dropdown-toggle" type="button" id="@($"viewButton-{contentItem.ContentItemId}")" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            @T["View"]
        </button>
        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="@($"viewButton-{contentItem.ContentItemId}")">
            <a href="@($"{PageConfig.PreviewAppPrefix}{url}")"
               target="_blank"
               class="dropdown-item btn-sm">@T["View draft content"]</a>

            @if (hasPublished)
            {
                <a href="@($"{PageConfig.PublishedAppPrefix}{url}")"
                   target="_blank"
                   class="dropdown-item btn-sm">@T["View published content"]</a>
            }
        </div>
    </div>
}
