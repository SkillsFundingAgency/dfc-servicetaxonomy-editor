@using DFC.ServiceTaxonomy.ContentApproval.Models
@using DFC.ServiceTaxonomy.ContentApproval.Models.Enums
@using DFC.ServiceTaxonomy.CustomEditor.Configuration
@using DFC.ServiceTaxonomy.CustomEditor.Constants
@using DFC.ServiceTaxonomy.PageLocation.Models
@using OrchardCore.Contents
@using OrchardCore.ContentManagement
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options

@inject IAuthorizationService AuthorizationService
@inject IOptions<PagesConfiguration> PagesConfig
@inject IOptions<JobProfilesConfiguration> JobProfilesConfig
@inject IOptions<FooterConfiguration> FooterConfig
@inject IOptions<HeaderConfiguration> HeaderConfig
@inject IContentManager ContentManager

@{
    ContentItem contentItem = Model.ContentItem;
    var hasDraft = contentItem.HasDraft();
    var contentTypeMatched = (contentItem.ContentType == ContentTypes.Footer || contentItem.ContentType == ContentTypes.Header);
    var hasPublished = await ContentManager.HasPublishedVersionAsync(contentItem);
    var hasPublishPermission = await AuthorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, contentItem);
    var hasClonePermission = contentTypeMatched == false ? await AuthorizationService.AuthorizeAsync(User, CommonPermissions.CloneContent, contentItem) : false;
    var hasViewPermission = await AuthorizationService.AuthorizeAsync(User, CommonPermissions.ViewContent, contentItem);
    var hasPreviewPermission = await AuthorizationService.AuthorizeAsync(User, CommonPermissions.PreviewContent, contentItem);
    var previewContentTypes = contentItem.ContentType == ContentTypes.Page || contentItem.ContentType == ContentTypes.JobProfile || contentItem.ContentType == ContentTypes.Footer || contentItem.ContentType == ContentTypes.Header;
}
@* Publish - handle publish if content part not present in content item *@
@if (hasDraft && !contentItem.Has<ContentApprovalPart>())
{
    if (hasPublishPermission)
    {
        <a asp-action="Publish" asp-controller="Admin" asp-route-area="OrchardCore.Contents" asp-route-contentItemId="@contentItem.ContentItemId" asp-route-returnUrl="@FullRequestPath" data-url-af="UnsafeUrl" class="dropdown-item btn-sm">@T["Publish Draft"]</a>
        <div class="dropdown-divider"></div>
    }
}

@* Edit - handle edit dependent on whether content approval applies to content item *@
@if (contentItem.Has<ContentApprovalPart>())
{
    var isInReview = contentItem.As<ContentApprovalPart>()?.ReviewStatus == ReviewStatus.InReview;
    var hasEditPermission = await AuthorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem) && User.HasClaim(c => c.Value == CommonPermissions.EditContent.Name);
    if (!isInReview && hasEditPermission)
    {
        <a asp-action="Edit" asp-controller="ContentApproval" asp-route-area="DFC.ServiceTaxonomy.ContentApproval" asp-route-contentItemId="@contentItem.ContentItemId" asp-route-returnUrl="@FullRequestPath" data-url-af="UnsafeUrl" class="dropdown-item btn-sm"><span>@T["Edit"]</span></a>
    }
}
else
{
    <a edit-for="@contentItem" asp-route-returnUrl="@FullRequestPath" data-url-af="UnsafeUrl" class="dropdown-item btn-sm">@T["Edit"]</a>
}

@* View draft/View published - View dependent on content type i.e. Page content types view through CUI apps *@
@if (previewContentTypes)
{
    var previewURI = contentItem.ContentType switch
    {
        ContentTypes.Page => string.Concat(PagesConfig.Value.PreviewAppPrefix, contentItem.Content[nameof(PageLocationPart)][nameof(PageLocationPart.FullUrl)]),
        ContentTypes.JobProfile => string.Concat(JobProfilesConfig.Value.PreviewAppPrefix, contentItem.Content[nameof(PageLocationPart)][nameof(PageLocationPart.FullUrl)]),
        ContentTypes.Header => HeaderConfig.Value.PreviewAppPrefix,
        ContentTypes.Footer => FooterConfig.Value.PreviewAppPrefix,
        _ => string.Empty
    };

    var publishedURI = contentItem.ContentType switch
    {
        ContentTypes.Page => string.Concat(PagesConfig.Value.PublishedAppPrefix, contentItem.Content[nameof(PageLocationPart)][nameof(PageLocationPart.FullUrl)]),
        ContentTypes.JobProfile => string.Concat(JobProfilesConfig.Value.PublishedAppPrefix, contentItem.Content[nameof(PageLocationPart)][nameof(PageLocationPart.FullUrl)]),
        ContentTypes.Header => HeaderConfig.Value.PublishedAppPrefix,
        ContentTypes.Footer => FooterConfig.Value.PublishedAppPrefix,
        _ => string.Empty
    };

    if (hasDraft && hasPreviewPermission)
    {
        <a href="@($"{previewURI}")" target="_blank" class="dropdown-item btn-sm">@T["View draft content"]</a>
    }
    if (hasPublishPermission && hasViewPermission && hasPublished)
    {
        <a href="@($"{publishedURI}")" target="_blank" class="dropdown-item btn-sm">@T["View published content"]</a>
    }
}
else
{
    if (hasDraft && hasPreviewPermission)
    {
        <a asp-action="Preview" asp-controller="Item" asp-route-area="OrchardCore.Contents" asp-route-contentItemId="@contentItem.ContentItemId" target="_blank" class="dropdown-item btn-sm"><span>@T["View draft content"]</span></a>
    }
    if (hasPublishPermission && hasViewPermission && hasPublished)
    {
        <a display-for="@contentItem" target="_blank" class="dropdown-item btn-sm" itemprop="">@T["View published content"]</a>
    }
}

@*Clone - OOTB clone button remains in Actions menu*@
@if (hasClonePermission)
{
    <a asp-action="Clone" asp-controller="Admin" asp-route-area="OrchardCore.Contents" asp-route-contentItemId="@contentItem.ContentItemId" asp-route-returnUrl="@FullRequestPath" data-url-af="UnsafeUrl" class="dropdown-item btn-sm">@T["Clone"]</a>
}
