@using DFC.ServiceTaxonomy.CustomEditor.Configuration
@using DFC.ServiceTaxonomy.CustomEditor.Constants
@using DFC.ServiceTaxonomy.PageLocation.Models
@using DFC.ServiceTaxonomy.CustomEditor.Handlers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Options
@using OrchardCore.ContentManagement
@using OrchardCore.Contents
@inject IAuthorizationService AuthorizationService
@inject IConfiguration Configuration

@{
    ContentItem contentItem = Model.ContentItem;
    var redirectUris = Configuration.GetSection(ConfigKeys.PreviewRedirectUri).Get<List<PreviewRedirectUri>>();
    var previewId = Guid.NewGuid();
    var hasPreviewPermission = await AuthorizationService.AuthorizeAsync(User, CommonPermissions.PreviewContent, contentItem);
    var isPreviewRequired = Configuration.GetSection(ConfigKeys.RequiredPreviewContentItems).Get<List<string>>() ?? new List<string>();
	var baseUrl = Configuration.GetSection(ConfigKeys.BaseUrlPath).Get<string>() ?? string.Empty;
    var previewURI = string.Empty;
}

@if (isPreviewRequired.Any(previewItem => previewItem.Contains(contentItem.ContentType)))
{
    if (redirectUris?.Count > 0)
    {
        previewURI = contentItem.ContentType switch
        {
			ContentTypes.Page => string.Concat(contentItem.Content[nameof(PageLocationPart)][nameof(PageLocationPart.FullUrl)].ToString()),
            ContentTypes.JobProfile => string.Concat(redirectUris.Where(Uri => Uri.ContentType == ContentTypes.JobProfile).Select(uri => uri.RedirectUri).FirstOrDefault(), contentItem.Content[nameof(PageLocationPart)][nameof(PageLocationPart.FullUrl)].ToString()),
            ContentTypes.JobProfileSector => redirectUris.Where(Uri => Uri.ContentType == ContentTypes.JobProfileSector).Select(uri => uri.RedirectUri).FirstOrDefault(),
            ContentTypes.SectorLandingPage => string.Concat(redirectUris.Where(Uri => Uri.ContentType == ContentTypes.JobProfileSector).Select(uri => uri.RedirectUri).FirstOrDefault(), contentItem.Content[nameof(PageLocationPart)][nameof(PageLocationPart.FullUrl)].ToString()),
            ContentTypes.Header => redirectUris.Where(Uri => Uri.ContentType == ContentTypes.Header).Select(uri => uri.RedirectUri).FirstOrDefault(),
			ContentTypes.Footer => redirectUris.Where(Uri => Uri.ContentType == ContentTypes.Footer).Select(uri => uri.RedirectUri).FirstOrDefault(),
            _ => string.Empty
        };
    }

    bool allowPagePreview = !string.IsNullOrWhiteSpace(contentItem.ContentItemVersionId) && contentItem.HasDraft();

    <div class="btn-group btn-group-approval">
        @if (allowPagePreview)
        {
            <a href="@($"{previewURI}")" target="_blank" class="btn btn-info" onclick="handlePreviewClick(); return false;">@T["Preview draft"]</a>
        }
        else
        {
            <button disabled="disabled" class="btn btn-info" title="A draft version must be saved before using the preview">@T["Preview draft"]</button>
        }
    </div>

    <script>
        async function handlePreviewClick() {
            const response = await fetch("/StaxPreview/GotoUrl?Path=@($"{previewURI}")")
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(url => {
                    window.open(url, '_blank');
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });
        }
    </script>
}
else
{
    if (hasPreviewPermission)
    {
        <a id="previewButton" target="_blank" class="btn btn-info" href="@Url.Action("Index", "Preview", new {area = "OrchardCore.ContentPreview", id = previewId})">@T["Preview"]</a>
    }

    <div id="renderPreviewUrl" style="display: none" data-value="@Url.Action("Render", "Preview", new { area = "OrchardCore.ContentPreview" })"></div>
    <div id="contentItemType" style="display: none" data-value="@Model.ContentItem.ContentType"></div>
    <div id="previewId" style="display: none" data-value="@previewId"></div>
    <div id="previewContentItemId" style="display: none" data-value="@Model.ContentItem.ContentItemId"></div>
    <div id="previewContentItemVersionId" style="display: none" data-value="@Model.ContentItem.ContentItemVersionId"></div>

    <script asp-name="contentpreview-edit" at="Foot"></script>
}
