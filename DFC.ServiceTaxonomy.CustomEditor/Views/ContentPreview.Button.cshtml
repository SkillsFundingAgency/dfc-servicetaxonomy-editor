@using DFC.ServiceTaxonomy.CustomEditor.Configuration
@using DFC.ServiceTaxonomy.CustomEditor.Constants
@using DFC.ServiceTaxonomy.PageLocation.Models
@using DFC.ServiceTaxonomy.CustomEditor.Handlers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Options
@using OrchardCore.ContentManagement
@using OrchardCore.Contents
@inject IAuthorizationService AuthorizationService
@inject IConfiguration Configuration
@inject IOptions<PagesConfiguration> PagesConfig
@inject IOptions<JobProfilesConfiguration> JobProfilesConfig
@inject IOptions<FooterConfiguration> FooterConfig
@inject IOptions<HeaderConfiguration> HeaderConfig

@{
	ContentItem contentItem = Model.ContentItem;
	var redirectUris = Configuration.GetSection(ConfigKeys.PreviewRedirectUri).Get<List<PreviewRedirectUri>>();
	var allowedPages = Configuration.GetSection(ConfigKeys.EventGridAllowedPagesList).Get<List<string>>() ?? new List<string>();
	var allowedContentTypes = Configuration.GetSection(ConfigKeys.EventGridAllowedContentType).Get<List<string>>() ?? new List<string>();
	var previewId = Guid.NewGuid();
	var hasPreviewPermission = await AuthorizationService.AuthorizeAsync(User, CommonPermissions.PreviewContent, contentItem);
	var isAllowedContent = allowedContentTypes.Any(a => a.Contains(contentItem.ContentType));
	var isPreviewRequired = contentItem.ContentType == ContentTypes.Page || contentItem.ContentType == ContentTypes.JobProfile || contentItem.ContentType == ContentTypes.Footer || contentItem.ContentType == ContentTypes.Header;

	//Temp key used to determine if preview button should use new redirect url.
	var isNcsPreview = false;

	//Temp keys used for proving if page is valid within allowed page list.
	var previewURI = string.Empty;
}

@if (isPreviewRequired)
{
	//Temp check to see if page matches approved page routes within appsettings.
	@if (contentItem.ContentType == "Page" && isAllowedContent)
	{
		var pageLocation = contentItem.Content[nameof(PageLocationPart)][nameof(PageLocationPart.FullUrl)].ToString();
		@if (allowedPages.Any(pageUrl => pageLocation.Contains(pageUrl)))
		{
			var redirectUri = redirectUris?.Where(uri => uri.ContentType == contentItem.ContentType).Select(uri => uri.RedirectUri).FirstOrDefault();
			previewURI = string.Concat(redirectUri, pageLocation);
			isNcsPreview = true;
		}
		else
		{
			previewURI = string.Concat(PagesConfig.Value.PreviewAppPrefix, pageLocation);
		}
	}
	else if (isAllowedContent)
	{
		previewURI = redirectUris?.Where(uri => uri.ContentType == contentItem.ContentType).Select(uri => uri.RedirectUri).FirstOrDefault();
		isNcsPreview = true;
	}
	else
	{
		//Once job profile preview functionality is added, can remove this else section and tidy up if else statement above.
		previewURI = contentItem.ContentType switch
		{
			ContentTypes.JobProfile => string.Concat(JobProfilesConfig.Value.PreviewAppPrefix, contentItem.Content[nameof(PageLocationPart)][nameof(PageLocationPart.FullUrl)]),
			_ => string.Empty
		};
	}

	bool allowPagePreview = !string.IsNullOrWhiteSpace(contentItem.ContentItemVersionId) && contentItem.HasDraft();

	<div class="btn-group btn-group-approval">
		@if (allowPagePreview)
		{
			@if (isNcsPreview)
			{
				<a href="@($"{previewURI}")" target="_blank" class="btn btn-info" onclick="handlePreviewClick(); return false;">@T["Preview draft"]</a>
			}
			else
			{
				<a href="@($"{previewURI}")" target="_blank" class="btn btn-info">@T["Preview draft"]</a>
			}
		}
		else
		{
			<button disabled="disabled" class="btn btn-info" title="A draft version must be saved before using the preview">@T["Preview draft"]</button>
		}
	</div>

	<script>
		async function handlePreviewClick() {
			const response = await fetch("/StaxPreview/GotoUrl?Path=@($"{previewURI}")")
				.then(response => {
					if (!response.ok) {
						throw new Error('Network response was not ok');
					}
					return response.text();
				})
				.then(url => {
					window.open(url, '_blank');
				})
				.catch(error => {
					console.error('There was a problem with the fetch operation:', error);
				});
		}
	</script>
}
else
{
	if (hasPreviewPermission)
	{
		<a id="previewButton" target="_blank" class="btn btn-info" href="@Url.Action("Index", "Preview", new {area = "OrchardCore.ContentPreview", id = previewId})">@T["Preview"]</a>
	}

	<div id="renderPreviewUrl" style="display: none" data-value="@Url.Action("Render", "Preview", new { area = "OrchardCore.ContentPreview" })"></div>
	<div id="contentItemType" style="display: none" data-value="@Model.ContentItem.ContentType"></div>
	<div id="previewId" style="display: none" data-value="@previewId"></div>
	<div id="previewContentItemId" style="display: none" data-value="@Model.ContentItem.ContentItemId"></div>
	<div id="previewContentItemVersionId" style="display: none" data-value="@Model.ContentItem.ContentItemVersionId"></div>

	<script asp-name="contentpreview-edit" at="Foot"></script>
}
