@model OrchardCore.Contents.AuditTrail.ViewModels.AuditTrailContentEventViewModel
@using DFC.ServiceTaxonomy.CustomEditor.Helper
@using Microsoft.Extensions.Localization
@using OrchardCore.ContentManagement
@using OrchardCore.Contents.AuditTrail.Extensions
@using OrchardCore.Contents.AuditTrail.Services
@using DFC.ServiceTaxonomy.CustomEditor.Constants;
@using DFC.ServiceTaxonomy.UnpublishLater.Models;
@using DFC.ServiceTaxonomy.CustomEditor.Handlers.CustomAuditTrailEvents;
@inject IStringLocalizer<ViewContext> S

@{
    var contentItem = Model.ContentEvent.ContentItem;
    var versionText = S["Version {0}", Model.VersionNumber];
    var eventName = Model.Descriptor.LocalizedName(Context.RequestServices).Value.ToLowerInvariant();
    var editForLink = await Orchard.EditForLinkAsync(contentItem.DisplayText, contentItem);
    if (editForLink is TagBuilder editForLinkTagBuilder && editForLinkTagBuilder.Attributes["href"].EndsWith("Edit"))
    {
        editForLinkTagBuilder.Attributes["href"] = editForLinkTagBuilder.Attributes["href"] + "?returnUrl=" + Html.UrlEncoder.Encode(FullRequestPath);
    }
    var versionLink = Html.ActionLink(S["Version {0}", Model.VersionNumber], "Display", "AuditTrailContent",
        new
        {
            area = "OrchardCore.Contents",
            auditTrailEventId = Model.AuditTrailEvent.EventId
        }, null);

    var summaryFormat = AuditTrailSummaryHelper.GetAuditTrailItemSummaryTextFormat(Model);
}

@if(!string.IsNullOrWhiteSpace(summaryFormat))
{
    <small>
        @T[summaryFormat,
            versionLink,
            editForLink]
    </small>
}
else
{
    <small>
        @T["{0} of the {1} {2} was {3}",
        versionLink,
        contentItem.ContentType,
        editForLink,
        eventName]
    </small>
}
