@model GraphLookupPartViewModel
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;

@{
    var settings = Model?.Settings;

    var selectedItems = JsonConvert.SerializeObject(Model?.SelectedItems, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
    var partName = Model?.PartName;
    var contentName = Model?.GraphLookupPart?.ContentItem?.ContentType;
    var searchUrl = Url.RouteUrl(new { area = "DFC.ServiceTaxonomy.GraphLookup", controller = "GraphLookupAdmin", action = "SearchLookupNodes", part = partName, content= contentName });
    //todo: might want a better prefix, but this will work
    var vueElementId = $"GraphLookup_{Guid.NewGuid():n}";
    var multiple = settings?.Multiple.ToString().ToLowerInvariant();
}

<script asp-src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.min.js" debug-src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js" asp-name="vuejs" at="Foot"></script>
<script asp-src="https://cdn.jsdelivr.net/npm/vue-multiselect@2.1.0/dist/vue-multiselect.min.js" asp-name="vuemultiselect" at="Foot"></script>
<style asp-src="https://cdn.jsdelivr.net/npm/vue-multiselect@2.1.0/dist/vue-multiselect.min.css"></style>
<script asp-src="https://cdn.jsdelivr.net/sortable/1.4.2/Sortable.min.js" debug-src="https://cdn.jsdelivr.net/sortable/1.4.2/Sortable.js" asp-name="sortable" at="Foot"></script>
<script asp-src="https://cdn.jsdelivr.net/npm/vuedraggable@2.23.0/dist/vuedraggable.umd.min.js" debug-src="https://cdn.jsdelivr.net/npm/vuedraggable@2.23.0/dist/vuedraggable.umd.js" asp-name="vuedraggable" depends-on="vuejs, sortable" at="Foot"></script>
<script asp-src="~/OrchardCore.ContentFields/Scripts/vue-multiselect-wrapper.js" asp-name="vue-multiselect-wrapper" at="Foot" depends-on="vuejs, vuemultiselect, sortable"></script>

<style asp-src="~/OrchardCore.ContentFields/Styles/vue-multiselect-wrapper.min.css" debug-src="~/OrchardCore.ContentFields/Styles/vue-multiselect-wrapper.css"></style>

@*todo field name in settings*@
<label asp-for="ItemIds">@settings?.DisplayName</label>

@*todo don't want a search-url if readonly*@
@*todo what (if any) part of oc uses data-field?*@
<div id="@vueElementId" class="vue-multiselect" data-part="@partName" @*data-field="@fieldName"*@ data-editor-type="GraphLookup" data-selected-items="@selectedItems" data-search-url="@searchUrl" data-multiple="@multiple">

    <div class="form-group">
        <ul class="list-group w-xl-50 content-picker-default__list" v-show="arrayOfItems.length" v-cloak>
            <draggable v-model="arrayOfItems">
                <li v-for="(item, i) in arrayOfItems"
                    class="cursor-move list-group-item content-picker-default__list-item d-flex align-items-start justify-content-between"
                    :key="item.id">
                    <div class="align-items-center align-self-center"><span>{{ item.displayText }}</span> @*<span v-show="!item.hasPublished" class="text-muted small">(@T["Not published"])</span>*@</div>

                    <div class="btn-group btn-group-sm align-items-center" role="group">
                        <button v-on:click="remove(item)" type="button" class="btn btn-secondary content-picker-default__list-item__delete"><i class="fa fa-trash fa-sm" aria-hidden="true"></i></button>
                    </div>
                </li>
            </draggable>
        </ul>
    </div>

    <div class="form-group">
        <div class="w-xl-50">
            <input asp-for="ItemIds" type="hidden" v-model="selectedIds" />
            <vue-multiselect v-model="value" :options="options" track-by="id"
                             label="displayText" placeholder="@T["Type to search"]"
                             @@search-change="asyncFind" @@select="onSelect"
                             :searchable="true" :close-on-select="true" :reset-after="true"
                             :show-labels="true" :hide-selected="@multiple"
                             :disabled="isDisabled"
                             select-label="@T["Select"]" deselect-label="@T["Remove"]">
                <template slot="option" slot-scope="props">
                    <div v-cloak><span>{{ props.option.displayText }}</span></div>
                </template>
                <template slot="noResult">
                    @T["No result found"]
                </template>
            </vue-multiselect>
            <span class="hint">@settings?.Hint</span>
        </div>
    </div>
</div>
<script at="Foot" depends-on="vue-multiselect-wrapper">initVueMultiselect(document.querySelector("#@vueElementId"))</script>
